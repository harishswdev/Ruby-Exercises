require 'test/unit'
require_relative 'zen_desk_api.rb'
require 'uuidtools'
require 'rexml/document'
require 'open-uri'
require 'rest_client'


class ZenDeskAPITest < Test::Unit::TestCase
  # To change this template use File | Settings | File Templates.
  # create a user agent - positive test
  include REXML


  def setup
    @username = 'harishkrishna@yahoo.com'
    @pswd = 'aashiana'
    @host = 'http://rateitindia.zendesk.com'
    @zendeskclient = ZenDeskAPI.new(@host, @username, @pswd)
  end




  # Successfully Add an agent to the existing "SUPPORT" group"
  # the group id in this case = 134692
  # we add a random agent genereated by the guid in this case
  def test_createuseragent
    begin
      randomagent = UUIDTools::UUID.timestamp_create.to_s
      @zendeskclient.createuser(randomagent+='@gmail.com', 'Harish', "4", "0", [134692])
      assert_equal(201, @zendeskclient.responsecode)
    rescue
      assert(false) # any exception and we fail
    end

  end

  # Negative test cases:- nonexistent group
  def test_createuser_nonexistentgroupid
    begin
      invalid_group_id = 007
      @zendeskclient.createuser('someuser@gmail.com', 'Harish', "4", "0", [invalid_group_id])

    rescue RequestFailureException # test for 404
      assert(true) # we are expecting to throw this exception
    rescue => e
      puts e.message
      assert(false) # any other exception and we fail
    end
  end

  # use incorrect value of role id
  # the only possible value are [0,1,2,3,4].. lets try with value 14
  def test_createuser_invalidrestrictionid
    begin

      @zendeskclient.createuser('someuser@gmail.com', 'Harish', "4", "14", [134692])
    rescue ArgumentError
      assert(true) # we are expecting to throw this exception
    rescue => e
      puts e.message
      assert(false) # any other exception and we fail
    end

  end

  # use incorrect value of role id
  # the only possible value are 0,2,4.. lets try with value 25
  def test_createuser_invalidroleid
    begin

      @zendeskclient.createuser('someuser@gmail.com', 'Harish', "25", "0", [134692])
    rescue ArgumentError
      assert(true) # we are expecting to throw this exception
    rescue => e
      puts e.message
      assert(false) # any exception and we fail
    end

  end


  # successfully add a ticket for an existing user
  # if the header has the string of our zendesk account then we succeed
  def test_createticket

    @zendeskclient.createticket("test ticket", "4", 'Captain Cool', "alphabar@foobar5.com")
    assert_equal(201, @zendeskclient.responsecode)
    assert(@zendeskclient.response.to_s.match('http://rateitindia.zendesk.com'))

  end


  # create a ticket and solve it
  # the number 31198262 is a predefined assignee to enable us to solve this ticket
  # we test for the value of the status id before and after the creations and resolution
  # of the ticket. A new ticket (unassigned) has the value of 0
  # after resolution of the ticket the status is changed to 3

  def test_solveticket

    # create ticket
    @zendeskclient.createticket("test ticket", "4", 'Captain Cool', "alphabar@foobar5.com")
    assert_equal(201, @zendeskclient.responsecode)
    assert(@zendeskclient.response.to_s.match('http://rateitindia.zendesk.com'))
    tktcreationresponse = @zendeskclient.response

    resource = RestClient::Resource.new tktcreationresponse, 'harishkrishna@yahoo.com', 'aashiana'
    doc = Document.new(resource.get)
    # a new ticket; assert on the status of the ticket
    assert_equal("0", doc.root.elements["status-id"].text)


    ticketid = ZenDeskAPI.extractid(tktcreationresponse)


    # solve the ticket and test for the http error code
    @zendeskclient.solveticket("31198262", ticketid)
    assert_equal(200, @zendeskclient.responsecode)

    resource = RestClient::Resource.new tktcreationresponse, 'harishkrishna@yahoo.com', 'aashiana'
    doc = Document.new(resource.get)
    # after solving the ticket; assert on the status of the ticket
    assert_equal("3", doc.root.elements["status-id"].text)

  end

  #  test that the xml  generated by the methods are correct
  # we will compare the actual and expected xml generated strings
  # to check for its correctness
  def test_userxmlgeneration
    begin

      xmlgen = @zendeskclient.createuserxml('aljohson@yourcompany.dk', 'Al Johnson', "4", "1", ["2", "3"])
      actualxmldoc = Document.new(xmlgen)

      f = File.new("user_expected.xml")
      expectedxmldoc = Document.new(f).to_s

      # assert_equal(actualxmldoc, expectedxmldoc) need to strip xml header before we can do this comparison

    rescue
      assert(false) # if we hit this assertion for any reason means,  we have failed
    end


  end

  # test the utility method that extracts the  name of the xml file for
  # tickets/users etc from the url of that file
  def test_extractid
    actual = ZenDeskAPI.extractid('http://rateitindia.zendesk.com/tickets/24.xml')
    assert_equal('24.xml', actual)
  end

  # test handling of the HTTP 401 case
  # make a call with wrong credentials
  # make a call to any of our API's with wrong credentials
  def test_negativeauth
    begin
      fakeclient = ZenDeskAPI.new('http://rateitindia.zendesk.com', "fake", "wrongassword")
      fakeclient.createticket("test ticket", "4", 'Captain Cool', "alphabar@foobar5.com")
    rescue RequestFailureException # test for 401
      assert(true) # expected exception
    rescue
      assert(false)
    end
  end

   # the happy path to show that the workflow works as expected.1.
  #1.Creates a user
  #2. Creates a ticket with that user as requester
  #3. Marks that ticket as solved

  def test_workflow

    #create a random agent
    randomagent = UUIDTools::UUID.timestamp_create.to_s
    @zendeskclient.createuser(randomagent+='@gmail.com', 'Harish', "4", "0", [134692])
    assert_equal(201, @zendeskclient.responsecode)
    #lets make sure the /user/#{id}.xml exists

    usercreationresponse = @zendeskclient.response
    begin
      resource = RestClient::Resource.new usercreationresponse, @username, @pswd
    rescue
      assert(false) # if we hit this assertion for any reason means, we cannot access the user file
      # which means we have failed
    end

    # create ticket with the same user as created above as requester
    # this is implemented by using the same email id as before
    @zendeskclient.createticket("test ticket", "4", 'Captain Cool', randomagent)
    assert_equal(201, @zendeskclient.responsecode)
    assert(@zendeskclient.response.to_s.match(@host))
    tktcreationresponse = @zendeskclient.response

    resource = RestClient::Resource.new tktcreationresponse, 'harishkrishna@yahoo.com', 'aashiana'
    doc = Document.new(resource.get)
    # a new ticket; assert on the status of the ticket
    assert_equal("0", doc.root.elements["status-id"].text)


    ticketid = ZenDeskAPI.extractid(tktcreationresponse)


    # solve the ticket and test for the http error code
    @zendeskclient.solveticket("31198262", ticketid)
    assert_equal(200, @zendeskclient.responsecode)

    resource = RestClient::Resource.new tktcreationresponse, 'harishkrishna@yahoo.com', 'aashiana'
    doc = Document.new(resource.get)
    # after solving the ticket; assert on the status of the ticket
    assert_equal("3", doc.root.elements["status-id"].text)


  end
end